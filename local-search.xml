<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vscode插件开发过程记录(使用外部PDF浏览器打开pdf)</title>
    <link href="/Vscode%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95-%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8PDF%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80pdf/"/>
    <url>/Vscode%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95-%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8PDF%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80pdf/</url>
    
    <content type="html"><![CDATA[<p>记录下自己从零做一个Vscode插件的过程。开发Vscode插件需要用的语言是typescript。</p><p>先给几点小建议:<br>写插件时可以找下功能类似的插件源代码(博主写到最后发现已经有类似的了，不过还是借鉴了不少)。<br>官方例程合集:<br><a href="https://github.com/microsoft/vscode-extension-samples">https://github.com/microsoft/vscode-extension-samples</a><br>可以看看官方文档的中文翻译，很详细了:<br><a href="https://liiked.github.io/VS-Code-Extension-Doc-ZH/#/get-started/extension-anatomy">https://liiked.github.io/VS-Code-Extension-Doc-ZH/#/get-started/extension-anatomy</a></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>按<a href="https://liiked.github.io/VS-Code-Extension-Doc-ZH/#/get-started/your-first-extension">教程</a>安装Node.js和Git，再在命令行中运行’npm install -g yo generator-code’。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>在预项目位置运行’yo code’并按提示进行配置后得到一个可以开发的Vscode插件项目。</p><p>使用Vscode打开该项目，点击F5，在新窗口中按下’Ctrl+Shift+P’输入’Hello World’命令，能看到新窗口的右下角弹出Hello World弹窗。</p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>所生成的文件机构如下列所示</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.<br>├── <span class="hljs-selector-class">.vscode</span><br>│   ├── launch<span class="hljs-selector-class">.json</span>     <span class="hljs-comment">// 插件加载和调试的配置</span><br>│   └── tasks<span class="hljs-selector-class">.json</span>      <span class="hljs-comment">// 配置TypeScript编译任务</span><br>├── <span class="hljs-selector-class">.gitignore</span>          <span class="hljs-comment">// 忽略构建输出和node_modules文件</span><br>├── README<span class="hljs-selector-class">.md</span>           <span class="hljs-comment">// 提示文档</span><br>├── <span class="hljs-attribute">src</span><br>│   └── extension<span class="hljs-selector-class">.ts</span>    <span class="hljs-comment">// 插件源代码</span><br>├── package<span class="hljs-selector-class">.json</span>        <span class="hljs-comment">// 插件配置清单</span><br>├── tsconfig<span class="hljs-selector-class">.json</span>       <span class="hljs-comment">// TypeScript配置</span><br></code></pre></td></tr></table></figure><p>其实主要需要修改就是’extension.ts’文件(负责执行代码)和’package.json’文件(解释包里面的配置)。</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>activationEvents是触发事件，触发时运行main(默认为extension.ts文件)，可以触发的事件在contributes中均列举出来。</p><p>事件类型有以下这些，具体可以看<a href="https://code.visualstudio.com/api/references/activation-events">官方文档</a>，选择自己插件 的触发时间。当然也可以添加多个触发事件(或关系)。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">onLanguage</span><br><span class="hljs-literal">on</span>Command<br><span class="hljs-literal">on</span>Debug<br><span class="hljs-literal">on</span>DebugInitialConfigurations<br><span class="hljs-literal">on</span>DebugResolve<br>workspaceContains<br><span class="hljs-literal">on</span>FileSystem<br><span class="hljs-literal">on</span>View<br><span class="hljs-literal">on</span>Uri<br><span class="hljs-literal">on</span>WebviewPanel<br><span class="hljs-literal">on</span>CustomEditor<br><span class="hljs-literal">on</span>AuthenticationRequest<br><span class="hljs-literal">on</span>StartupFinished<br>*<br></code></pre></td></tr></table></figure><p>博主想让插件在打开pdf时触发，所以触发方式选择了’onCustomEditor:external-pdf’。并在’contributes’中配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&quot;customEditors&quot;</span>: [&#123;<br><span class="hljs-string">&quot;viewType&quot;</span>: <span class="hljs-string">&quot;external-pdf&quot;</span>,<span class="hljs-regexp">//</span>与onCustomEditor后保持一致<br><span class="hljs-string">&quot;displayName&quot;</span>: <span class="hljs-string">&quot;External Pdf Preview&quot;</span>,<span class="hljs-regexp">//</span>编辑器所显示名字<br><span class="hljs-string">&quot;selector&quot;</span>: [&#123;<br><span class="hljs-string">&quot;filenamePattern&quot;</span>: <span class="hljs-string">&quot;*.pdf&quot;</span><span class="hljs-regexp">//</span>是何种文件的编辑器<br>&#125;]<br>&#125;]<br></code></pre></td></tr></table></figure><p>这里需要按你选择的触发方式去修改。</p><p>如果你需要用到插件配置，需要添加configuration让用户进行修改。因为博主需要让用户选择外部编辑器位置，所以添加了一项插件配置。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&quot;configuration&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;object&quot;</span>,<br>            <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;external-pdf&quot;</span>,<span class="hljs-regexp">//</span>配置文件中显示名字，最好与插件名字相同<br>            <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br><span class="hljs-string">&quot;external-pdf.command&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<span class="hljs-regexp">//</span>配置项类型<br><span class="hljs-string">&quot;default&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<span class="hljs-regexp">//</span>配置项默认值<br><span class="hljs-string">&quot;markdownDescription&quot;</span>: <span class="hljs-string">&quot;The external command to open pdf.&quot;</span><span class="hljs-regexp">//</span>配置项描述<br>  &#125;  <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此外如果需要用到其他依赖包就需要在’package’的’dependencies’及’devDependencies’中进行添加依赖。</p><h3 id="extension-ts"><a href="#extension-ts" class="headerlink" title="extension.ts"></a>extension.ts</h3><p>主要为’activate’函数，这个函数在第一次激活插件后运行一次。</p><p>如果要每次触发时均运行需注册函数。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">let</span> disposable = vscode.<span class="hljs-keyword">window</span>.registerXX(<span class="hljs-string">&quot;external-pdf&quot;</span>);//根据触发类型决定函数名，引号内事件名需与<span class="hljs-string">&#x27;activationEvents&#x27;</span>一致<br><span class="hljs-keyword">context</span>.subscriptions.push(disposable);<br></code></pre></td></tr></table></figure><p>此外博主使用cross-spawn库进行命令行打开外部窗口，spawn函数第一项参数为命令，第二项参数为命令参数数组。</p><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>命令行输入’npm install -g vsce’安装vsce。在<code>package.json</code>的version下面一行添加<br>    <code>&quot;publisher&quot;: &quot;x&quot;,</code>，后面的双引号内需与下面的publisher名称一致。命令行运行’vsce package’打包代码(需要添加许可证)。</p><p>注册微软账号，再去<a href="https://dev.azure.com/vscode">https://dev.azure.com/vscode</a>注册Azure组织，按图中点击获得个人令牌。</p><p><img src="https://media.githubusercontent.com/media/Microsoft/vscode-docs/master/api/working-with-extensions/images/publishing-extension/token1.png" alt="image"></p><p>如果没有marketplace点show more scopes就好了</p><p><img src="https://media.githubusercontent.com/media/Microsoft/vscode-docs/master/api/working-with-extensions/images/publishing-extension/token2.png" alt="image"><br>去<a href="https://marketplace.visualstudio.com/manage/createpublisher?managePageRedirect=true">https://marketplace.visualstudio.com/manage/createpublisher?managePageRedirect=true</a>创建publisher(名称需与<code>package.json</code>中的publisher一致)，然后去<a href="https://marketplace.visualstudio.com/manage/publishers/">https://marketplace.visualstudio.com/manage/publishers/</a> 选择Vscode插件上传自己<code>vsce package</code>打包完的插件进行发布。就可以静候佳音，等着插件在市场里出现。</p><p>之后进行插件更改的话只需要重新<code>vsce package</code>并发布即可。</p><p>以上就是本人开发Vscode插件过程。本人是前端小白，如有不对请各位大佬指正。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/corentinartaud/vscode-pdfpreview">https://github.com/corentinartaud/vscode-pdfpreview</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/James-Yu/LaTeX-Workshop">https://github.com/James-Yu/LaTeX-Workshop</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://liiked.github.io/VS-Code-Extension-Doc-ZH/#/get-started/extension-anatomy">https://liiked.github.io/VS-Code-Extension-Doc-ZH/#/get-started/extension-anatomy</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://www.jianshu.com/p/e642856f6044">https://www.jianshu.com/p/e642856f6044</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://www.cnblogs.com/liuxianan/p/vscode-plugin-overview.html">https://www.cnblogs.com/liuxianan/p/vscode-plugin-overview.html</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Feedly RSS订阅每日学术期刊及机器人期刊、会议缩写黑话</title>
    <link href="/Feedly-RSS%E8%AE%A2%E9%98%85%E6%AF%8F%E6%97%A5%E5%AD%A6%E6%9C%AF%E6%9C%9F%E5%88%8A%E5%8F%8A%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%9C%9F%E5%88%8A%E3%80%81%E4%BC%9A%E8%AE%AE%E7%BC%A9%E5%86%99%E9%BB%91%E8%AF%9D/"/>
    <url>/Feedly-RSS%E8%AE%A2%E9%98%85%E6%AF%8F%E6%97%A5%E5%AD%A6%E6%9C%AF%E6%9C%9F%E5%88%8A%E5%8F%8A%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%9C%9F%E5%88%8A%E3%80%81%E4%BC%9A%E8%AE%AE%E7%BC%A9%E5%86%99%E9%BB%91%E8%AF%9D/</url>
    
    <content type="html"><![CDATA[<p>以前本科时不清楚如何收集第一手学术资料，最近稍微入门了下，分享出来。</p><p><img src="https://cdn.jsdelivr.net/gh/ChangcongWang/Wcc-s-Picbed/Feedly-RSS%E8%AE%A2%E9%98%85%E6%AF%8F%E6%97%A5%E5%AD%A6%E6%9C%AF%E6%9C%9F%E5%88%8A%E5%8F%8A%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%9C%9F%E5%88%8A%E3%80%81%E4%BC%9A%E8%AE%AE%E7%BC%A9%E5%86%99%E9%BB%91%E8%AF%9D-Feedly-2022-03-10-20-00-58.png" alt="Feedly-RSS订阅每日学术期刊及机器人期刊、会议缩写黑话-Feedly-2022-03-10-20-00-58"></p><p>目前我使用的是Feedly RSS订阅器，不了解RSS订阅器可以百度下。之所以选择Freely是因为他的RSS源比较稳定，并且可以追溯未订阅前的文章，有些Researcher(本质也是RSS订阅器)没展示的文章都能订阅到。虽然需要使用魔法，但作为一名研究生，多少都得懂点魔法吧。</p><p>方法: 进入<a href="https://feedly.com/">https://feedly.com/</a>并注册，然后点击加号搜索关注的期刊，进行合理设置后每天都可以在该网站上获得一手资料。</p><p>如果不知道关注什么期刊，可以到<a href="https://scholar.google.com/citations?view_op=top_venues&hl=en">谷歌的这个网站</a>选取对应领域进行查看，例如<a href="https://scholar.google.com/citations?view_op=top_venues&hl=en&vq=eng_robotics">机器人领域的热门刊物</a>，一般热门刊物上面的文章都不会差到哪去。其中会议(Conference)是不能订阅的，期刊是一直在更新的，会议区别于期刊每年只有3天左右在疯狂产出，对于会议只需要在会议时间关注会议官网即可获得一手资料。需要注意的是热门刊物中所展示的刊物可能不全(毕竟只是热门)，需要注意平时看的文章的刊物。</p><p>除了订阅期刊外，还可以订阅<a href="https://www.zhihu.com/question/31864895">Arxiv</a>的各个方向。</p><hr><p>以前还不太懂机器人领域的期刊、会议的缩写，借此机会说下。</p><p><img src="https://cdn.jsdelivr.net/gh/ChangcongWang/Wcc-s-Picbed/Feedly-RSS%E8%AE%A2%E9%98%85%E6%AF%8F%E6%97%A5%E5%AD%A6%E6%9C%AF%E6%9C%9F%E5%88%8A%E5%8F%8A%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%9C%9F%E5%88%8A%E3%80%81%E4%BC%9A%E8%AE%AE%E7%BC%A9%E5%86%99%E9%BB%91%E8%AF%9D-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%83%AD%E9%97%A8%E6%9C%9F%E5%88%8A-2022-03-10-20-02-06.png" alt="Feedly-RSS订阅每日学术期刊及机器人期刊、会议缩写黑话-机器人热门期刊-2022-03-10-20-02-06"></p><p>以<a href="https://scholar.google.com/citations?view_op=top_venues&hl=en&vq=eng_robotics">机器人领域的热门刊物</a>为例，图中橙色为会议，黑色为期刊(没标指不太相关或者找不到缩写)。</p><p>RSS(这个不是指上面的RSS订阅器)就是我们的顶会了，ICRA与IROS也算是仅次于RSS的定会。</p><p>Science Robotics算顶刊了。Soft Robotic为软体机器人，如果不是该方向的可以不用关注，感觉画风不太一样。此外，还有ICR(International Conference on Interactive Collaborative Robotics)等会议与期刊，可以根据你的研究方向看看论文一般发表在哪个期刊上再去关注对应的期刊。</p><p>文章只是针对一手学术资料的获取进行建议，日常的文章当然还是需要灵活运用关键词进行谷歌学术搜索。如果文章中出现错误或者各位大佬有其他补充的，欢迎在评论区留言。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ROS1迁移至ROS2教程记录</title>
    <link href="/ROS1%E8%BF%81%E7%A7%BB%E8%87%B3ROS2%E6%95%99%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    <url>/ROS1%E8%BF%81%E7%A7%BB%E8%87%B3ROS2%E6%95%99%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>最近频繁把包迁移至ROS2，借此机会记录下。</p><p>照着官方例程改的这3个文件就可以了。</p><h1 id="package-xml"><a href="#package-xml" class="headerlink" title="package.xml"></a>package.xml</h1><p>重点在catkin修改为ament_cmake，roscpp修改为rclcpp，将run_depend部分改为export部分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- &lt;package&gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>talker<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>talker<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">maintainer</span> <span class="hljs-attr">email</span>=<span class="hljs-string">&quot;gerkey@osrfoundation.org&quot;</span>&gt;</span>Brian Gerkey<span class="hljs-tag">&lt;/<span class="hljs-name">maintainer</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">license</span>&gt;</span>Apache License 2.0<span class="hljs-tag">&lt;/<span class="hljs-name">license</span>&gt;</span><br><span class="hljs-comment">&lt;!--  &lt;buildtool_depend&gt;catkin&lt;/buildtool_depend&gt; --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">buildtool_depend</span>&gt;</span>ament_cmake<span class="hljs-tag">&lt;/<span class="hljs-name">buildtool_depend</span>&gt;</span><br><span class="hljs-comment">&lt;!--  &lt;build_depend&gt;roscpp&lt;/build_depend&gt; --&gt;</span><br><span class="hljs-comment">&lt;!--  &lt;run_depend&gt;roscpp&lt;/run_depend&gt; --&gt;</span><br><span class="hljs-comment">&lt;!--  &lt;run_depend&gt;std_msgs&lt;/run_depend&gt; --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>rclcpp<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>std_msgs<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">export</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build_type</span>&gt;</span>ament_cmake<span class="hljs-tag">&lt;/<span class="hljs-name">build_type</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">export</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">package</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h1><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs leaf"><span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">cmake_minimum_required</span><span class="hljs-params">(<span class="hljs-variable">VERSION</span> 2.8.3)</span></span><br>cmake_minimum_required(VERSION 3.5)<br>project(talker)<br>if(NOT CMAKE_CXX_STANDARD)<br>  set(CMAKE_CXX_STANDARD 14)<br>endif()<br>if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES &quot;Clang&quot;)<br>  add_compile_options(-Wall -Wextra -Wpedantic)<br>endif()<br><span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">find_package</span><span class="hljs-params">(<span class="hljs-variable">catkin</span> <span class="hljs-variable">REQUIRED</span> <span class="hljs-variable">COMPONENTS</span> <span class="hljs-variable">roscpp</span> <span class="hljs-variable">std_msgs</span>)</span></span><br>find_package(ament_cmake REQUIRED)<br>find_package(rclcpp REQUIRED)<br>find_package(std_msgs REQUIRED)<br><span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">catkin_package</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">include_directories</span><span class="hljs-params">($&#123;<span class="hljs-variable">catkin_INCLUDE_DIRS</span>&#125;)</span></span><br>include_directories(include)<br>add_executable(talker talker.cpp)<br><span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">target_link_libraries</span><span class="hljs-params">(<span class="hljs-variable">talker</span> $&#123;<span class="hljs-variable">catkin_LIBRARIES</span>&#125;)</span></span><br>ament_target_dependencies(talker<br>  rclcpp<br>  std_msgs)<br><span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">install</span><span class="hljs-params">(<span class="hljs-variable">TARGETS</span> <span class="hljs-variable">talker</span></span></span><br><span class="hljs-params"><span class="hljs-function">#  <span class="hljs-variable">RUNTIME</span> <span class="hljs-variable">DESTINATION</span> $&#123;<span class="hljs-variable">CATKIN_PACKAGE_BIN_DESTINATION</span>&#125;)</span></span><br>install(TARGETS talker<br>  DESTINATION lib/$&#123;PROJECT_NAME&#125;)<br>install(DIRECTORY include/<br>  DESTINATION include)<br>ament_export_include_directories(include)<br>ament_export_dependencies(std_msgs)<br>ament_package()<br></code></pre></td></tr></table></figure><h1 id="scr"><a href="#scr" class="headerlink" title="scr"></a>scr</h1><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><span class="hljs-comment">// #include &quot;ros/ros.h&quot;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;rclcpp/rclcpp.hpp&quot;</span></span><br><span class="hljs-comment">// #include &quot;std_msgs/String.h&quot;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;std_msgs/msg/string.hpp&quot;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> **argv)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//  ros::init(argc, argv, &quot;talker&quot;);</span><br><span class="hljs-comment">//  ros::NodeHandle n;</span><br>  rclcpp::<span class="hljs-built_in">init</span>(argc, argv);<br>  <span class="hljs-keyword">auto</span> node = rclcpp::Node::<span class="hljs-built_in">make_shared</span>(<span class="hljs-string">&quot;talker&quot;</span>);<br><span class="hljs-comment">//  ros::Publisher chatter_pub = n.advertise&lt;std_msgs::String&gt;(&quot;chatter&quot;, 1000);</span><br><span class="hljs-comment">//  ros::Rate loop_rate(10);</span><br>  <span class="hljs-keyword">auto</span> chatter_pub = node-&gt;create_publisher&lt;std_msgs::msg::<span class="hljs-keyword">String</span>&gt;(<span class="hljs-string">&quot;chatter&quot;</span>, <span class="hljs-number">1000</span>);<br>  <span class="hljs-function">rclcpp::Rate <span class="hljs-title">loop_rate</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>  <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//  std_msgs::String msg;</span><br>  std_msgs::msg::<span class="hljs-keyword">String</span> msg;<br><span class="hljs-comment">//  while (ros::ok())</span><br>  <span class="hljs-keyword">while</span> (rclcpp::<span class="hljs-built_in">ok</span>())<br>  &#123;<br>    std::stringstream ss;<br>    ss &lt;&lt; <span class="hljs-string">&quot;hello world &quot;</span> &lt;&lt; count++;<br>    msg.data = ss.<span class="hljs-built_in">str</span>();<br><span class="hljs-comment">//    ROS_INFO(&quot;%s&quot;, msg.data.c_str());</span><br>    <span class="hljs-built_in">RCLCPP_INFO</span>(node-&gt;<span class="hljs-built_in">get_logger</span>(), <span class="hljs-string">&quot;%s\n&quot;</span>, msg.data.<span class="hljs-built_in">c_str</span>());<br>    chatter_pub-&gt;<span class="hljs-built_in">publish</span>(msg);<br><span class="hljs-comment">//    ros::spinOnce();</span><br>    rclcpp::<span class="hljs-built_in">spin_some</span>(node);<br>    loop_rate.<span class="hljs-built_in">sleep</span>();<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://docs.ros.org/en/foxy/Contributing/Migration-Guide.html">https://docs.ros.org/en/foxy/Contributing/Migration-Guide.html</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/s9426224/article/details/120291634">https://blog.csdn.net/s9426224/article/details/120291634</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python 安装包 Microsoft Visual C++ 14.0 or greater is required</title>
    <link href="/Microsoft-Visual-C-14-0-or-greater-is-required/"/>
    <url>/Microsoft-Visual-C-14-0-or-greater-is-required/</url>
    
    <content type="html"><![CDATA[<p>博主在安装pybullet时遇见以下错误</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Microsoft Visual C++ <span class="hljs-number">14.0</span> or greater is required. Get it with <span class="hljs-string">&quot;Microsoft C++ Build Tools&quot;</span>: https:<span class="hljs-regexp">//</span>visualstudio.microsoft.com<span class="hljs-regexp">/visual-cpp-build-tools/</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ChangcongWang/Wcc-s-Picbed/Microsoft-Visual-C-14-0-or-greater-is-required-%E5%AE%89%E8%A3%85pybullet%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-2022-03-10-19-48-03.png" alt="Microsoft-Visual-C-14-0-or-greater-is-required-安装pybullet错误解决方法-2022-03-10-19-48-03"><br>到所提示网站安装完build-tools还是不能用，按<a href="https://wiki.python.org/moin/WindowsCompilers">python官方</a>来说需要将MSVC和Windows 10 SDK都选上，博主就将整个’使用c++的桌面开发给选上了’，安装了9个G，再次安装就不会报错了。</p>]]></content>
    
    
    <categories>
      
      <category>错误总结</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Github Pages+Hexo博客搭建记录</title>
    <link href="/Github%20Pages+Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    <url>/Github%20Pages+Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h1><p>在GitHub上建立一个与自己名字相同的存储库(不同也行)，详细可以看<a href="../%E6%96%B0%E5%BB%BA%E5%A4%9A%E4%B8%AAGithub%20Pages%E5%B9%B6%E8%BF%81%E7%A7%BBPages/">新建多个Github Pages并迁移Pages</a>，然后在Settings中的Pages选项将Source选择到该存储库的根目录。</p><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>其实<a href="https://hexo.io/zh-cn/docs/index.html">Hexo官网</a>上怎么建说得已经很详细了，我这里再精简下。  </p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载并安装<a href="https://nodejs.org/en/download/">node.js</a>及<a href="https://git-scm.com/download/win">Git</a>。</p><p>在命令行(win+R输入cmd打开)中使用下面三条命令检查版本验证安装成功与否。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>npm -v<br>git -v<br></code></pre></td></tr></table></figure><p>在命令行输入以下命令安装Hexo，安装位置好像没法改变，不是想网上说的在哪个路径下运行就安装到哪里。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure><h2 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h2><p>新建一个文件夹用于存放你的博客及各项配置，这里将其命名为blog。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">hexo init <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>cd <span class="hljs-keyword">blog </span><span class="hljs-comment">#进入blog文件夹</span><br>npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>可看到我们的blog目录已经变成以下结构，其中_config.yml文件用于记录网站的配置信息。themes用于存放主题，source的_posts存放你所有博客文章，scaffolds存放页面及文章的模板。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sqf">.<br>├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── <span class="hljs-variable">_drafts</span><br>|   └── <span class="hljs-variable">_posts</span><br>└── themes<br></code></pre></td></tr></table></figure><p>在blog文件夹路径下的命令行中输入以下命令打开hexo的本地服务器，然后在你浏览器的地址栏输入<code>localhost:4000</code>就能看到你建完的站了。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>这里简要说下几个常用命令及其简写。</p><table><thead><tr><th>命令</th><th>简写</th><th>作用</th></tr></thead><tbody><tr><td>hexo server</td><td>hexo s</td><td>在本地启动博客服务</td></tr><tr><td>hexo new “题目”</td><td>hexo n “题目”</td><td>新建题目为<code>题目</code>的博客</td></tr><tr><td>hexo generate</td><td>hexo g</td><td>生成public文件夹(即要放在GitHub Pages中的东西)</td></tr><tr><td>hexo clean</td><td>无</td><td>清除本地生成文件(即public文件夹)</td></tr><tr><td>hexo deploy</td><td>hexo d</td><td>把本地public文件夹进行部署(一般使用<code>hexo d -g</code>进行生成并部署)</td></tr></tbody></table><h2 id="发布网站"><a href="#发布网站" class="headerlink" title="发布网站"></a>发布网站</h2><p>要发布网站还需要在网站配置_config.yml中最后一项deploy，以下是我的配置，大家把repo改为自己建的用户名同名仓库即可。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//github.com/ChangcongWang/ChangcongWang.github.io.git</span><br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure><p>使用<code>hexo d -g</code>进行生成并部署。 </p><p>需要Github的身份验证时输入自己创建的SSH keys中的SHA256即可，部署完就能在 username.github.io (username为你Github的用户名)中看到自己部署完的博客了,这时候别人也能通过这个网站访问到你的博客，如果是之前的<code>hexo s</code>是只有你一个人能够看到。</p><p>网站配置_config.yml中还有需要修改的信息就是第一项Site，参数如下，其他根据自己需要改(一般除了网站的url不需要大改了)。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>keywords</td><td>网站的关键词(别人可以通过搜关键词搜到你的网站)使用半角逗号隔开</td></tr><tr><td>author</td><td>您的名字</td></tr><tr><td>language</td><td>网站使用的语言。一般根据主题设定</td></tr><tr><td>timezone</td><td>网站时区，我设置为<code>Asia/Shanghai</code></td></tr></tbody></table><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p><code>hexo n &quot;题目&quot;</code>即可，编辑/blog/source/_posts中的<code>题目.md</code>即可写一篇博客，markdown编辑器暂推荐Vscode+Markdown All in One插件，具体markdown语法请自行查阅。</p><h2 id="新增存储库的README-md"><a href="#新增存储库的README-md" class="headerlink" title="新增存储库的README.md"></a>新增存储库的README.md</h2><p>在source文件夹下新建README.md，然后在网站配置中设置skip_render参数为README.md。</p><h1 id="Fluid或其他主题"><a href="#Fluid或其他主题" class="headerlink" title="Fluid或其他主题"></a>Fluid或其他主题</h1><p>主题使用的是<a href="https://hexo.fluid-dev.com/docs">Fluid</a>，主题请别太用心，重点在写博客。 </p><p>配置主题流程大概是：</p><ol><li>npm或其他方式下载到themes文件夹中</li><li>修改hexo的网站配置_config.yml中的themes和language</li></ol><h2 id="Fluid安装过程"><a href="#Fluid安装过程" class="headerlink" title="Fluid安装过程:"></a>Fluid安装过程:</h2><p>npm下载或到Fluid的<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">Release</a>页面下载并解压到themes中，解压完的文件夹重命名为<code>fluid</code>。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>修改网站配置_config.yml的themes为<code>fluid</code>和language为<code>zh-CN</code></p><p>将fluid中的 _config.yml(主题配置，不同于前文提到的网站配置)复制到\blog文件夹下，修改其名字为<code>_config.fluid.yml</code>，这样之后进行更新主题不会把自己的_config.yml给覆盖掉。</p><p>然后根据自己的爱好按<a href="https://hexo.fluid-dev.com/docs/guide/">Fluid文档</a>修改主题配置吧。  </p><p>hhhh我也陷入陷阱了，搭了老久的博客结果一篇都没写，羞愧至极，所以从建站这篇博客作为一个开始吧。</p><p>屏幕前的你也可以将自己的建站记录下来，说不定会帮到更多的人,所以赶紧<code>hexo n</code>一篇吧。</p><hr><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><p>本来想用树莓派或其他Linux搭一个服务器(主要用于写博客和组NAS及其他服务)，但目前是在校状态没办法整公网IP等骚操作，本着<code>如无必要，勿增实体</code>的概念，最终还是选(tuo)择(xie)了GitHub Pages搭建博客，NAS选择玩客云进行改装。  </p><p>这里记录下总结到的连接家中服务器(内网穿透)的方法，无非就两种(个人粗见，欢迎指正)：</p><ol><li>申请公网IP(一般为动态IP)+DDNS(动态域名解析)</li><li>Frp/ngrok相关服务+有公网IP的机器(作为跳板)</li></ol><p><a href="https://www.natfrp.com/">SakuraFrp</a>、<a href="https://www.uulap.com/">uulap</a>及各种公网IP盒子基本用的都是第2种方法.</p><p>目前使用的markdown是有道云笔记(同步功能香但快捷键垃圾)+部分VScode，准备全面迁移去VScode(云端使用GitHub同步(暂定))。</p><h3 id="目前个人博客未完成工作"><a href="#目前个人博客未完成工作" class="headerlink" title="目前个人博客未完成工作"></a>目前个人博客未完成工作</h3><ul><li><input disabled="" type="checkbox"> Latex插件</li><li><input disabled="" type="checkbox"> RSS订阅</li><li><input disabled="" type="checkbox"> 评论区</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.fluid-dev.com/docs/guide/">https://hexo.fluid-dev.com/docs/guide/</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:1" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/26625249">https://zhuanlan.zhihu.com/p/26625249</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>新建多个Github Pages并迁移Pages</title>
    <link href="/%E6%96%B0%E5%BB%BA%E5%A4%9A%E4%B8%AAGithub%20Pages%E5%B9%B6%E8%BF%81%E7%A7%BBPages/"/>
    <url>/%E6%96%B0%E5%BB%BA%E5%A4%9A%E4%B8%AAGithub%20Pages%E5%B9%B6%E8%BF%81%E7%A7%BBPages/</url>
    
    <content type="html"><![CDATA[<p>可能挺多人想拥有很多个github pages(比如我)，但实际上GitHub允许有多个GitHub Pages，但只允许有一个个人的Github Pages。</p><p>举例来说：<br><a href="https://github.com/username/project">https://github.com/username/project</a> 这样的每个项目都有一个<br><a href="https://github.com/username">https://github.com/username</a> 这样的只能有一个  </p><p>所以新建一个Repository，命名为你想要的子标题(注意该标题区分大小写)，如果你想把其他Github仓库导入，大可不必把仓库clone下来再push到新建的仓库，直接在新建的仓库中选择<code>import code from another repository</code>的<code>import code</code>，输入你想clone的仓库网址即可。</p><p>迁移完后在该Repository的Settings中的Pages选项将Source选择到你的index所存放位置即可，这样就获得了一个项目Pages。</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/183977963">https://zhuanlan.zhihu.com/p/183977963</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>Entities should not be multiplied beyond necessity</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>这里是王畅聪（INTP本机器人），一位目前在山大搞机器人人机协作的研究生，主要使用语言为C和Python，目前在ROS2中使用MoveIt!研究多轴机器人的实时避障。</p><p>本科就读于燕山大学（自动化），混过电赛和数学建模。  </p><p>爱好看书、旅游、单机游戏（巫师3天下第一）、电影、古典音乐等，具体可以看看我豆瓣的“吾爱”文件夹。  </p><p>想深入了解古典音乐、哲学、dnd跑团，等大佬带我入（踹）门。  </p><p>各类联系方式均置于头像下方，欢迎勾搭。  </p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>看看博主最近在干什么</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h1 id="进行"><a href="#进行" class="headerlink" title="进行"></a>进行</h1><ul><li>人机交互   </li><li>用亿佰特蓝牙模块组机械键盘  </li></ul><h1 id="待做"><a href="#待做" class="headerlink" title="待做"></a>待做</h1><ul><li>添加评论区  </li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在下方是我最近遇见的问题，欢迎各位相互交流  </p><ul><li> 如何通过MoveIt流畅控制Franka</li></ul>]]></content>
    
  </entry>
  
  
  
</search>
